---
# General
model_sel: "sgnn"
post_model_sel: "pqgnn" # only for split training
n_momenta: 4

# Classical
epochs: 20
normalize: True
dim_feedforward: 512
dim_feedforward_range: [4, 512, "log"]
batchnorm: True

dropout_rate: 0.2
dropout_rate_range: [0.1, 1.0, "linear"]
learning_rate: 0.01
learning_rate_range: [1e-5, 1e-1, "log"]
learning_rate_decay: 200
learning_rate_decay_range: [1, 1000, "log"]
gamma: 0.5
batch_size: 5
batch_size_range: [1, 64, "log"]
gradients_clamp: 1000
gradients_spreader: 1e-10

# GNN
n_blocks: 5
n_blocks_range: [1, 5, "linear"]
n_layers_mlp: 5 # initial mlp layers before the blocks
n_layers_mlp_range: [1, 5, "linear"]
n_additional_mlp_layers: 5 # additional layers within a block
n_additional_mlp_layers_range: [1, 5, "linear"]
n_final_mlp_layers: 5 # layers after the blocks
n_final_mlp_layers_range: [1, 5, "linear"]
factor: True
tokenize: -1
embedding_dims: -1
symmetrize: True

# Quantum
data_reupload: True
data_reupload_range: [True, False]
add_rot_gates: True
add_rot_gates_range: [True, False]
n_layers_vqc: 3
n_layers_vqc_range: [1, 5, "linear"]
#TODO specify when available
redis_host: "localhost"
redis_port: 6379
redis_path: "partiqlegan"
redis_password: ""

# PyTorch
detect_anomaly: False # enables torch' anomaly detector
device: 'cpu' # anything but 'cpu' to use cuda devices instead

# MLFLOW
plot_mode: "val"
plotting_rows: 4
log_gradients: False
git_hash_identifier: "git_hash"